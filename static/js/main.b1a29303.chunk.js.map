{"version":3,"sources":["tab-list.tsx","components/content/content.tsx","components/tab/tab.tsx","components/tabs/tabs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContentTypes","contents","id","content1","content","content2","tabList","value","label","defaultTab","Content","find","className","Tab","renderTab","onChange","currentTab","onClick","cn","Tabs","options","useState","setCurrentTab","renderTabComponent","map","tab","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAKKA,E,+DAAAA,K,aAAAA,E,cAAAA,M,KAUE,IAAMC,EAAqC,CAAC,CAACC,GAAIF,EAAaG,SAAUC,QAAS,aACtF,CAACF,GAAIF,EAAaK,SAAUD,QAAS,cAC1BE,EAA0B,CAAC,CAAEC,MAAO,IAAKC,MAAO,WAAY,CAAED,MAAO,IAAKC,MAAO,YACjFC,EAAsB,CAAEF,MAAO,IAAKC,MAAO,W,OCb3CE,EAA0C,SAAC,GAAuB,IAAD,EAArBR,EAAqB,EAArBA,GACjDE,GAAkB,UAAAH,EAASU,MAAK,SAACP,GAAD,OAAiCA,EAAQF,KAAOA,YAA9D,eAAmEE,UAAW,GACtG,OACE,qBAAKQ,UAAU,qBAAf,SACE,6BAAKR,O,gBCQES,EAAuC,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,UAAWC,EAA8C,EAA9CA,SAAUR,EAAoC,EAApCA,MAAOS,EAA6B,EAA7BA,WAChF,OACA,qBACEC,QAAS,kBAAMF,EAASR,IACxBK,UAAWM,IAAG,YAAa,CACzB,YAAaX,EAAMA,QAAUS,EAAWT,QAH5C,SAMGO,EAAUP,MCfFY,EAAuC,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,QAASb,EAAwB,EAAxBA,MAC7D,EAAoCc,mBAASd,GAA7C,mBAAOS,EAAP,KAAmBM,EAAnB,KAMMC,EAAqD,SAAC,GAA0B,IAAzBf,EAAwB,EAAxBA,MAC3D,OACE,8BAAMA,KAGZ,OACE,sBAAKI,UAAU,YAAf,UACE,qBAAKA,UAAU,OAAf,SACCQ,EAAQI,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,CAAKX,UAAWS,EAAoBR,SAAUO,EAAef,MAAOkB,EAAKT,WAAYA,SAGvF,cAAC,EAAD,CAASd,GAAIc,EAAWT,YCnBbmB,MANf,WACE,OACE,cAAC,EAAD,CAAMN,QAASd,EAASC,MAAOE,KCQpBkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b1a29303.chunk.js","sourcesContent":["export type TabType = {\n  value: string;\n  label: string;\n}\n\nenum ContentTypes {\n  content1 = '1',\n  content2 = '2'\n}\n\nexport type ContentDependence = {\n  id: ContentTypes;\n  content: string;\n}\n\nexport const contents: Array<ContentDependence> = [{id: ContentTypes.content1, content: 'Content 1'},\n  {id: ContentTypes.content2, content: 'Content 2'}]\nexport const tabList: Array<TabType> = [{ value: '1', label: 'Tab One'}, { value: '2', label: 'Tab Two'}]\nexport const defaultTab: TabType = { value: '1', label: 'Tab One'}","import React from \"react\";\nimport { contents, ContentDependence } from \"../../tab-list\";\ntype Props = {\n  id: string;\n}\nexport const Content: React.FunctionComponent<Props> = ({id}): JSX.Element => {\n  const content: string = contents.find((content : ContentDependence) => content.id === id)?.content || ''\n  return (\n    <div className=\"tabs__tab__content\">\n      <h2>{content}</h2>\n      \n    </div>\n  )\n}","import React from \"react\";\nimport { TabType } from '../../tab-list';\nimport cn from 'classnames';\n\ntype test = {\n  label: string;\n}\n\ntype func = React.FunctionComponent<test>;\n\ninterface Propss {\n  renderTab: func;\n  onChange: (value: TabType) => void;\n  value: TabType;\n  currentTab: TabType\n}\n\nexport const Tab: React.FunctionComponent<Propss> = ({renderTab, onChange, value, currentTab}): JSX.Element => {\n  return (\n  <div\n    onClick={() => onChange(value)}\n    className={cn('tabs__tab', {\n      'is-active': value.value === currentTab.value\n    })}\n  >\n    {renderTab(value)}\n  </div>)\n}","import React, { useState } from \"react\";\nimport { TabType } from '../../tab-list';\nimport { Content } from \"../content\";\nimport { Tab } from \"../tab/tab\";\n\ninterface Props {\n  options: Array<TabType>;\n  value: TabType;\n}\n\nexport const Tabs: React.FunctionComponent<Props> = ({options, value}): JSX.Element => {\n  const [currentTab, setCurrentTab] = useState(value);\n\n  type label = {\n    label: string\n  }\n\n  const renderTabComponent: React.FunctionComponent<label> = ({label}): JSX.Element => {\n    return (\n      <div>{label}</div>\n    )\n  }\nreturn (\n  <div className=\"container\">\n    <div className=\"tabs\">\n    {options.map(tab => (\n      <Tab renderTab={renderTabComponent} onChange={setCurrentTab} value={tab} currentTab={currentTab}/>\n    ))}\n    </div>\n    <Content id={currentTab.value}/>\n  </div>\n)\n}\n","import './App.sass';\nimport { Tabs } from './components/tabs/tabs';\nimport { tabList, defaultTab } from './tab-list';\n\nfunction App() {\n  return (\n    <Tabs options={tabList} value={defaultTab}/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}